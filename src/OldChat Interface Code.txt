import { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";
import { postQuestion } from "./APIServices";

// Function to format and return response as a string
function ChangeResponseFormat(response: any) {
  let sentence = ""; // Initialize the sentence variable to accumulate the responses

  // Iterate through the response array and append each sentence to the 'sentence' variable
  response.data.response.forEach((msg: string) => {
    sentence += msg + "<br>"; // Add the response followed by a line break
  });

  // Return the accumulated sentence
  return sentence;
}

function ChatInterface() {
  // UseState to hold form values and response messages
  const [formData, setFormData] = useState({
    questionForm: "",
    responseAI: "",
  });

  const [responses, setResponses] = useState<string[]>([]); // State to hold all responses

  const handleChange = (e: any) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const generateSubmit = async (e: any) => {
    // prevents default form submission behavior
    e.preventDefault();

    // Data to send to the API
    const data = {
      message: formData.questionForm,
    };

    try {
      // Call the postIngredients function passing the data as a parameter
      const response = await postQuestion(data);
      const response_content = ChangeResponseFormat(response);

      // Log the response content to check if the formatting is correct
      console.log(response_content);

      // Add the new response to the responses array
      setResponses((prevResponses) => [...prevResponses, response_content]);

      // Updates the formData with the latest response
      setFormData((prevData) => ({
        ...prevData,
        responseAI: response_content,
      }));
    } catch (error) {
      console.error("Error generating response:", error);
    }
  };

  return (
    <div>
      <Form onSubmit={generateSubmit}>
        <Form.Group className="mb-3" controlId="chatQuestion">
          <Form.Label>
            Questionssssssssssssssssssssssssssssssssssssssssssssssssss
          </Form.Label>
          <Form.Control
            type="text"
            name="questionForm"
            placeholder="Write Questions Here"
            value={formData.questionForm}
            onChange={handleChange}
          />
        </Form.Group>

        <Button variant="primary" type="submit">
          Submit Question
        </Button>
      </Form>

      {/* Container to display the responses */}
      <div id="GeneratedResponsesContainer">
        {responses.map((response, index) => (
          <div key={index} className="response-container">
            <div>{response}</div> {/* Each response will be displayed here */}
          </div>
        ))}
      </div>
    </div>
  );
}

export default ChatInterface;
